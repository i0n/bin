#!/usr/bin/env ruby

require 'fileutils'
require 'yaml'

module Super
  
  ROOT_PATH = File.expand_path(File.join(File.dirname(__FILE__)))
  @testo = "test inside super module"
    
  def self.testo=(value)
    @testo = value
  end
  
  def self.testo
    @testo
  end
  
  class Base
        
    def write
      @testo = 1
    end
    
    def read
      @testo
    end
        
  end
  
end

# puts obj = Super::Base.new
# puts obj.write
# puts obj.read
# puts
# puts Super.testo = "mashup"
# puts Super.testo

def join_paths(*args)
  paths = []
  full_path = []
  temp_paths = args.dup
  temp_paths.flatten!
  temp_paths.each do |x|
    unless x.nil?
      paths << x.to_s
    end
  end
  if paths[0].start_with?('/')
    absolute_path = true
  else
    absolute_path = false
  end
  paths.each do |path|
    unless path.nil?
      path.strip!
      path.slice!(0) while path.start_with?('/')
      path.chop! while path.end_with?('/')
      full_path << path
    end
  end
  full_path_string = full_path.join('/')
  full_path_string.slice!(0) while full_path_string.start_with?('/')
  full_path_string.chop! while full_path_string.end_with?('/')
  full_path_string.insert(0, '/') if absolute_path
  full_path_string
end

@value1 = "world"
@value2 = "yo"
@value3 = '/an/absolute/path.txt'
@value4 = 'a/relative/path.txt'
puts join_paths('hello', 'world', 'yo.txt')
puts join_paths('hello', '/world/', '/yo.txt')
puts join_paths('.hello', '/world/', '/yo.txt')
puts join_paths('hello///', '/world/', '//yo.txt///')
puts
puts join_paths('/.hello', '/world/', '/yo.txt')
puts join_paths('/', '.hello', '/world/', '/yo.txt')
puts join_paths('//', '.hello', '/world/', '/yo.txt')
puts join_paths('///', '.hello', '/world/', '/yo.txt')
puts
puts join_paths(['hello', 'world', 'yo.txt'])
puts join_paths(['hello', 'world', 'yo'], 'yo', 'yo.txt')
puts join_paths(['///hello', 'world', 'yo'], 'yo', 'yo.txt///')
puts join_paths(['///hello'], ['world', 'yo'], :yo , 'yo.txt///')
puts
puts join_paths(['///hello'], nil, ['world', nil ], :yo , 'yo.txt///')
puts join_paths(['///hello'], nil, [@value1, nil ], :yo , 'yo.txt///')
puts join_paths(['///hello'], nil, [@value1, nil ], :yo , "#{@value2}.txt///")
puts
puts join_paths("hello.txt")
puts join_paths("/hello.txt")
puts join_paths("/hello.txt/")
puts join_paths("///hello.txt///")
puts join_paths(@value3)
puts join_paths(@value4)

##################################################################################################################################################################

# def capture_stdout(&block)
#   original_stdout = $stdout
#   $stdout = fake = StringIO.new
#   begin
#     yield
#   ensure
#     $stdout = original_stdout
#   end
#  fake.string
# end


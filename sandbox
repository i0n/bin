#!/usr/bin/env ruby

# puts ENV['TM_BUNDLE_SUPPORT']
# puts RUBY_DESCRIPTION

require 'fileutils'
home_path = "/Users/i0n/Sites/bin/test"

string1 = home_path + "/blah/blah/Rakefile"
string2 = home_path + "/Rakefile"
string3 = home_path + "/blah/blah/test.txt"
string4 = home_path + "/test.txt"
string5 = home_path + "/change/should_not_change/test.txt"
string6 = home_path + "/changefile"
string7 = home_path + "/change.txt"
string8 = home_path + "/blah/blah/change.txt"
string9 = home_path + "/blah/change/change.txt"
strings = [string1, string2, string3, string4, string5, string6, string7, string8, string9]
@txt = IO.read("#{home_path}/source.txt")

def variable_check(target_file)
  old_dir = target_file.sub(/\/\w+\.*\w*$/, '')
  new_file = target_file.gsub(/#{old_dir}\//, '')
  puts "target_file: #{target_file}"
  puts "old_dir: #{old_dir}"
  puts "new_file: #{new_file}"
  puts
end

def replace_strings(target_file, args)
  if File.file?(target_file)
    permissions = File.executable?(target_file)
    original_txt = IO.read(target_file)
    old_dir = target_file.sub(/\/\w+\.*\w*$/, '')
    new_file = target_file.gsub(/#{old_dir}\//, '')
    new_dir = old_dir.dup
    new_txt = original_txt.dup
    args.each do |x, y|
      new_txt.gsub!(/#{x.to_s.upcase}_CLASS/, y.capitalize)
      new_txt.gsub!(/#{x.to_s.upcase}/, y)
      [new_dir, new_file].each do |z|
        z.gsub!(/#{x.to_s.downcase}/, y)
      end
    end
    if old_dir.to_s != new_dir.to_s
      FileUtils.mkdir_p(new_dir)
    end
    if original_txt != new_txt
      puts "This file has changed: #{target_file}"
      File.open("#{new_dir}/#{new_file}", "w+") do |file|
        file.puts new_txt
        file.chmod(0755) if permissions
      end
      FileUtils.rm(target_file)            
      if File.directory?(old_dir)
        if (Dir.entries(old_dir) - ['.', '..']).empty?
          FileUtils.remove_dir(old_dir)
        end
      end
    end
  else
    puts "#{target_file} is NOT a file"
  end
end

strings.each do |x|
  replace_strings(x, {:change => "yay", :ipsum => "MAATTE!!"})
end
